{"version":3,"sources":["store/constants/chatActionTypes.js","store/actions/chatActions.js","static/emily.svg","services/ServiceLocator.ts","services/utils.js","services/EventService.js","services/EventBus.js","store/reducers/Pipeline/pipeline.js","store/reducers/Pipeline/EntityTrackerFilter.js","store/reducers/Pipeline/UpdateEntityFilter.js","store/reducers/Pipeline/RemoveEntityFilter.js","store/reducers/Pipeline/VersionControlFilter.js","store/reducers/Pipeline/LogFilter.js","store/reducers/Pipeline/ValidateFilter.js","store/reducers/entities.js","services/actions.js","store/reducers/app.js","services/singleton.js","services/config.js","services/constants.js","store/signalrMiddleWare.js","store/store.js","components/Channels.js","components/ChannelsContainer.js","components/ChannelMessages.jsx","components/ChannelMessagesContainer.js","components/SignIn.jsx","components/home.jsx","components/Logs.js","services/entities/PhoneCall.js","services/entities/Entity.js","services/dataservice.js","components/PhoneCall.jsx","components/phoneCallContainer.js","components/MainLayout.jsx","Shila.ts","services/AService.js","ServiceComposer.js","index.js"],"names":["CONNECTION_STATUS_CHANGED","SIGN_IN","REFRESH","ENTITY_APPLY_EVENT","ENTITY_CLEAR_DB","connectionStatusChanged","newStatus","type","actionTypes","payload","status","ServiceLocator","serviceDefinitions","serviceName","constructor","instanceName","current","this","findIndex","s","name","def","cnst","push","result","undefined","services","filter","length","linq","require","utils","from","isArray","a","Array","indexOfEx","exp","i","clean","obj","propName","subject","Subject","next","subscribe","ev","EventNames","EntityAdded","Events","Names","e","EventBus","publish","c","Date","time","Notification","requestPermission","then","checkNotificationPromise","text","firstName","lastName","body","icon","_getEntityById","state","id","PipelineContext","action","getChannelId","channelId","getChannel","ret","isValid","version","payload1","payload2","payload3","isRemoveOperation","removed","isRemoveOperation_dep","getEntityId","getEntityType","getEntityName","getEntity","mergeAttributes","entity","payload_attribs","attributes","Object","assign","merge","description","JSON","parse","tracker","ctx","entity_after","updateFilter","entityId","entityType","channel","Number","isInteger","children","messages","includes","val","console","info","error","removeFilter","folder","idx","indexOf","splice","x","versionControlFilter","prev_version","event_version","isFinite","new_version","log","logFilter","validateFilter","warn","createPipeLineContext","invoke","p","createReducer","pipeline","forEach","getEntities","entities","key","getChannels","getMessages","map","Types","SEND_MESSAGE_TO_CHANNEL","CONNECTION_CLOSED","CONNECTION_STATUS_CONNECTED","CONNECTION_STATUS_DISCONNECTED","SIGN_OUT","SIGNED_IN","FORGET","Actions","chatState","widgetState","chatService","rate","activeChatId","connectionState","token","userName","loggedIn","getSinedIn","app","getUserName","singleton","Config","serverUrl","constants","types","serviceNames","connection","HubConnectionBuilder","configureLogging","LogLevel","Information","withAutomaticReconnect","nextRetryDelayInMilliseconds","retryContext","elapsedMilliseconds","Math","random","previousRetryCount","withUrl","skipNegotiation","transport","HttpTransportType","WebSockets","build","DoStart","storeAPI","getState","_persist","rehydrated","startModel","debug","channels","getAuthorizationToken","res","catch","err","signalRMiddleware","register","on","events","dispatch","processApplyEvent","onclose","onreconnected","onreconnecting","start","setTimeout","stringify","config","storage","reducer","persistCombineReducers","sagaMiddleware","createSagaMiddleware","configureStore","port","finalCreateStore","compose","applyMiddleware","window","devToolsExtension","fn","createStore","store","runSaga","run","persistor","persistStore","Channels","props","items","to","ChannelsContainer","connect","prototype","mapEx","callBack","message","Message","ChannelMessages","useState","messageInputValue","setMessageInputValue","placeholder","value","onChange","target","onClick","sendMessageToChannel","ChannelMessagesContainer","getEntityById","location","pathname","replace","Login","username","password","submitted","handleSubmit","bind","handleChange","setState","preventDefault","signIn","loggingIn","className","style","minHeight","htmlFor","href","Component","LoginContainer","HomeContainer","singnedIn","Logs","PhoneCall","data","Time","DataServices","page","calls","select","orderByDescending","skip","take","call","toString","renderCall","PhoneCallContainer","Create","getPhoneCalls","toArray","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","LayoutContainer","classes","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Shila","getService","_constants","AService","composeServices","document","getElementById","query","render","MainLayout","exact","path","SignIn","get"],"mappings":"2NAaaA,EAA2B,4BAI3BC,EAAU,UAEVC,EAAU,UAGVC,EAAoB,qBAEpBC,EAAiB,kBCAjBC,GCxBE,IDwBwB,SAACC,GAAD,MAAgB,CACtDC,KAAMC,EACNC,QAAQ,CACPC,OAAOJ,M,wBEkBMK,EADwB,I,WA3BnC,aAAe,yBADfC,mBAAkC,G,4CAGlC,SAASC,EAAiBC,EAAiBC,GAEvCA,EAAeA,GAAgB,QAC/B,IAAIC,EAAUC,KAAKL,mBAAmBM,WAAU,SAAAC,GAAC,OAAIA,EAAEC,OAASP,GAAeM,EAAEJ,eAAiBA,KAC9FM,EAAiB,CACjBD,KAAMP,EACNS,KAAMR,EACNC,aAAcA,GAMlB,OAJIC,EAAU,EACVC,KAAKL,mBAAmBW,KAAKF,GAE7BJ,KAAKL,mBAAmBI,GAAWK,EAChCA,I,wBAEX,SAAqBR,GACjB,IAAIW,OAASC,EACTC,EAAWT,KAAKL,mBAAmBe,QAAO,SAAAR,GAAC,OAAIA,EAAEC,OAASP,KAC1Da,EAASE,OAAS,IAElBJ,EADUE,EAASA,EAASE,OAAS,GACxBN,KAAKL,OAEtB,OAAOO,M,MCtCXK,EAAOC,EAAQ,IACfC,EAAQ,GACZA,EAAMC,KAAOH,EAAKG,KAClBD,EAAME,QAAU,SAAAC,GAAC,OAAIC,MAAMF,QAAQC,IAEnCH,EAAMK,UAAY,SAACF,EAAGG,GAElB,GAAIN,EAAME,QAAQC,GACd,IAAI,IAAII,EAAE,EAAEA,EAAEJ,EAAEN,OAAOU,IACnB,GAAID,GAAOA,EAAIH,EAAEI,IACb,OAAOA,EAGnB,OAAQ,GAEZP,EAAMQ,MAAQ,SAAeC,GACzB,IAAK,IAAIC,KAAYD,EACG,OAAlBA,EAAIC,SAAwChB,IAAlBe,EAAIC,WACzBD,EAAIC,GAIf,OAAOD,GAKIT,Q,iBC5BTW,EAAU,IAAIC,IACpBD,EAAQE,KAAK,GAMbF,EAAQG,WAAU,SAAAC,OAKH,ICbTJ,EAAU,IAAIC,IAcpB,IAAMI,EAAa,CACfC,YAAa,eAEXC,EAAO,CACTC,MAAMH,EACNC,YAAc,SAACG,GAAD,MAAM,CAAC5C,KAAKwC,EAAWC,YAAYvC,QAAQ0C,KAIvDC,E,kCAAAA,EAEKC,QAAU,SAAAP,GAAE,OAAEJ,EAAQE,KAAKE,IAFhCM,EAGKP,UAAY,SAAAS,GAAC,OAAGZ,EAAQG,UAAU,CAACD,KAAM,SAAAE,GAAE,OAAEQ,EAAER,OAHpDM,EAIKH,OAASA,EAGpBP,EAAQG,WAAU,SAAAC,GAGd,GAAIA,EAAGvC,OAAOwC,EAAWC,aAAeF,EAAGrC,SAA+B,cAApBqC,EAAGrC,QAAQF,OAE9C,IAAIgD,KAAS,IAAIA,KAAKT,EAAGrC,QAAQA,QAAQ+C,OAAO,IACnD,IAAK,EAjCzB,WACI,IACEC,aAAaC,oBAAoBC,OACjC,MAAMR,GACN,OAAO,GA8BLS,GACA,IACIC,EAAO,cAAgBf,EAAGrC,QAAQA,QAAQqD,UAAY,IAAMhB,EAAGrC,QAAQA,QAAQsD,SAGhE,IAAIN,aAAa,aAAc,CAAEO,KAFpDH,GAAQ,8BAEwDI,KAJtD,8CAYHb,QCzCf,SAASc,EAAeC,EAAO5D,EAAM6D,GACjC,OAAID,EAAM5D,IAAS4D,EAAM5D,GAAM6D,GACpBD,EAAM5D,GAAM6D,GAChB,K,MAGLC,EAGF,WAAYF,EAAOG,GAAS,IAAD,OAEvB,GAFuB,yBAF3BH,MAAQ,GAEmB,KAD3BG,OAAS,GACkB,KAU3BC,aAAe,kBAAM,EAAKD,OAAO7D,QAAQ+D,WAVd,KAW3BC,WAAa,WACT,IAAIC,EAAMR,EAAe,EAAKC,MAAO,UAAW,EAAKI,gBACrD,IAAKG,EAAK,CACN,IAAIF,EAAY,EAAKD,eACrBG,EAAMA,GAAO,CACTnE,KAAM,UACN6D,GAAII,EACJpD,KAAM,OAGd,OAAOsD,GArBgB,KAuB3BC,QAAU,kBAAM,EAAKL,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQ+D,WAvB/C,KAwB3BI,QAAU,kBAAM,EAAKN,OAAO7D,QAAQmE,SAxBT,KAyB3BC,SAAW,kBAAK,EAAKP,OAAO7D,SAAW,IAzBZ,KA0B3BqE,SAAW,kBAAI,EAAKD,WAAWpE,SAAW,IA1Bf,KA2B3BsE,SAAW,kBAAK,EAAKD,WAAWrE,SAAW,IA3BhB,KA4B3BuE,kBAAoB,iBAA+B,UAA1B,EAAKF,WAAWR,QAAsB,EAAKQ,WAAWG,SA5BpD,KA6B3BC,sBAAwB,kBAAM,EAAKZ,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQA,SAAW,EAAK6D,OAAO7D,QAAQA,QAAQwE,SA7BpG,KA8B3BE,YAAc,kBAAM,EAAKb,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQA,QAC1E,EAAK6D,OAAO7D,QAAQA,QAAQ2D,GAC5B,MAhCuB,KAiC3BgB,cAAgB,kBAAM,EAAKd,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQA,QAC5E,EAAK6D,OAAO7D,QAAQA,QAAQF,KAC5B,MAnCuB,KAoC3B8E,cAAgB,kBAAM,EAAKf,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQA,QAC5E,EAAK6D,OAAO7D,QAAQA,QAAQW,KAC5B,MAtCuB,KAwC3BkE,UAAY,WACR,IAAIlB,EAAK,EAAKe,cACV5E,EAAO,EAAK6E,gBAChB,OAAOhB,GAAM7D,EAAO2D,EAAe,EAAKC,MAAO5D,EAAM6D,GAAM,MA3CpC,KA8C3BmB,gBAAkB,SAACC,GAEf,GADAA,EAASA,GAAU,EAAKF,YACZ,CACME,EAAO/E,QAArB,IACIgF,EAAkB,EAAKnB,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQA,SAC5E,EAAK6D,OAAO7D,QAAQA,QAAQiF,YAAmB,GACnD,IACIF,EAAO/E,QAAUkF,OAAOC,OAAO,GAAIJ,EAAO/E,QAASgF,GACrD,MAAOtC,OAtDU,KA0D3B0C,MAAQ,SAACL,GAEL,KADAA,EAASA,GAAU,EAAKF,aACX,CACT,IAAIlB,EAAK,EAAKe,cACV5E,EAAO,EAAK6E,gBACZhB,GAAM7D,IACNiF,EAAS,CACLjF,KAAMA,EACN6D,GAAIA,EACJ3D,QAAS,KAIrB,GAAI+E,EAAQ,CACR,IAAI/E,EAAU,EAAK6D,QAAU,EAAKA,OAAO7D,SAAW,EAAK6D,OAAO7D,QAAQA,SAClE,EAAK6D,OAAO7D,QAAQA,QAAQA,SAC7B,GACL+E,EAAO/E,QAAUkF,OAAOC,OAAO,GAAGJ,EAAO/E,QAAQsB,EAAMQ,MAAM9B,IAC7D+E,EAAOpE,KAAO,EAAKiE,iBAAmBG,EAAOpE,KAC7CoE,EAAOM,YAAc,EAAKhB,WAAWgB,aAAeN,EAAOM,YAC3DN,EAAOhB,UAAY,EAAKD,eACxB,EAAKgB,gBAAgBC,GAEzB,OAAOA,GAhFPvE,KAAKkD,MAAQA,GAAS,GAClBG,GAAUA,EAAO7D,SAAW6D,EAAO7D,QAAQA,SAAqD,kBAAnC6D,EAAO7D,QAAQA,QAAQA,QACpF,IACI6D,EAAO7D,QAAQA,QAAQA,QAAUsF,KAAKC,MAAM1B,EAAO7D,QAAQA,QAAQA,SACrE,MAAO0C,IAEblC,KAAKqD,OAASA,GAAU,IAkIjB,GACX2B,QC3J0B,SAACC,EAAItD,GAE/B,IAAI4C,EAASU,EAAIZ,YACbZ,EAAM9B,EAAKsD,GACXC,EAAeD,EAAIZ,YASvB,OARea,IAAiBX,GAI5BpC,EAASC,QAAQD,EAASH,OAAOD,YAAYmD,IAI1CzB,GD+IP0B,aE1JmB,SAACF,EAAItD,GACxB,IAAIuB,EAAQ+B,EAAI/B,MACZG,EAAS4B,EAAI5B,OACbE,EAAYF,EAAO7D,QAAQ+D,UAG3B6B,EAAWH,EAAIf,cACfmB,EAAaJ,EAAId,gBAOjBmB,EAAUL,EAAIzB,cAAgB,CAC9BlE,KAAM,UACN6D,GAAII,EACJpD,KAAM,MACNwD,QAAS,GAETN,EAAO7D,SAAW+F,OAAOC,UAAUnC,EAAO7D,QAAQmE,UAAYN,EAAO7D,QAAQmE,SAAW,IACxF2B,EAAQ3B,QAAUN,EAAO7D,QAAQmE,SAErC2B,EAAQG,SAAUH,EAAQG,UAAY,GACtCH,EAAQI,SAAUJ,EAAQI,UAAY,GACtC,IAAInB,EAASU,EAAIL,QAEjB,GAAIL,GAAUa,GAAYC,EAEtB,OAAOA,GAEH,IAAK,UACIC,EAAQI,SAASC,SAASpB,EAAOpB,KAClCmC,EAAQI,SAASpF,KAAK8E,GAC1B,MACJ,IAAK,UACGb,EAAOpB,KAAOI,IACd+B,EAAUZ,OAAOC,OAAO,GAAGW,EAAQf,IAEvC,MACJ,QACiBe,EAAQG,SAChBxF,WAAU,SAAA2F,GAAG,OAAGA,GAAOA,EAAIzC,IAAMiC,GAAYQ,EAAIP,YAAcA,MAAc,GAE9EC,EAAQG,SAASnF,KAAK,CAClBhB,KAAM+F,EACNlC,GAAIiC,IA2CxB,OAtCAE,EAAQnC,GAAKI,EAETgB,GAAUc,GAAcD,GAAaA,GAAU7B,GAG/C0B,EAAI/B,MAAJ,2BACOA,GADP,gBAEI,QAAU,2BACHA,EAAMoC,SADb,kBAEK/B,EAAW+B,KAEfD,EANL,2BAOWnC,EAAMmC,IAPjB,kBAQSD,EAAUb,MAGnBsB,QAAQC,KAAK,WAAWT,EAAW,0BAA0Bd,IAGzDe,GAAW/B,GAEf0B,EAAK/B,MAAL,2BAEOA,GAFP,IAGI,QAAU,2BACHA,EAAMoC,SADb,kBAEK/B,EAAW+B,MAGpBO,QAAQC,KAAK,YAAYvC,EAAU,0BAA0B+B,IAG7DO,QAAQE,MACJ,uFAAwF1C,GAKzF1B,EAAKsD,IFkEZe,aG7JuB,SAACf,EAAKtD,GAC7B,GAAIsD,EAAIlB,oBAAqB,CACzB,IAAIZ,EAAK8B,EAAIf,cACT5E,EAAO2F,EAAId,gBACf,GAAIhB,GAAM7D,EAAM,CACZ,IAAI2G,EAAShB,EAAI/B,MAAM5D,IAAS,GAChC2G,EAAO9C,GAAM,KACb8B,EAAI/B,MAAM5D,GAAQwB,EAAMQ,MAAM2E,GAC9B,IAAIX,EAAUL,EAAIzB,aACd0C,GAAM,EACV,GAAa,YAAT5G,GACA4G,EAAMZ,EAAQI,SAASS,QAAQhD,KACtB,GACLmC,EAAQI,SAASU,OAAOF,EAAI,QAKhC,IADAA,EAAOZ,EAAQG,SAASxF,WAAU,SAAAoG,GAAC,OAAIA,EAAElD,KAAOA,GAAMkD,EAAE/G,OAASA,KAC1D4G,GAAO,GACVZ,EAAQG,SAASW,OAAOF,EAAK,GAC7BA,EAAOZ,EAAQG,SAASxF,WAAU,SAAAoG,GAAC,OAAIA,EAAElD,KAAOA,GAAMkD,EAAE/G,OAASA,KAGzEuG,QAAQC,KACJ,WAAWxG,EAAM,eAAe6D,EAAG,eAI/C,OAAOxB,EAAKsD,IHkIZqB,qBIhKyB,SAACrB,EAAItD,GAC9B,IAAI4E,EAAetB,EAAIzB,aAAaG,QAChC6C,EAAgBvB,EAAI5B,OAAO7D,QAAQmE,QACvC,GAA6B,kBAAlB6C,GAA8BC,SAASD,IAQlD,IAAI/C,EAAM9B,EAAKsD,GACXyB,EAAczB,EAAIzB,aAAaG,QAGnC,OAFAsB,EAAIzB,aAAa/D,OAAQ,GACzBoG,QAAQc,IAAI,cAAe1B,EAAI3B,eAAgB,gBAAgBiD,EAAc,MAAOG,GAC7EjD,GJkJPmD,UKjKa,SAAC3B,EAAItD,GAClB,IAAI8B,EAAM,KACVoC,QAAQc,IAAI,2BAA4B1B,EAAIzB,aAAc,UAAUyB,EAAI5B,QACxE,IAGII,EAAM9B,EAAKsD,GAEf,MAAO/C,GACH2D,QAAQE,MAAM,gCAAgC7D,GAGlD,OADA2D,QAAQc,IAAI,2BAA4B1B,EAAIzB,aAAc,UAAUyB,EAAI5B,QACjEI,GLsJPoD,eMlKkB,SAAC5B,EAAItD,GACdsD,EAAI5B,OAAO7D,QAGpB,OAFcyF,GAAOA,EAAI5B,QAAU4B,EAAI5B,OAAO7D,SACtCyF,EAAI5B,OAAO7D,QAAQ+D,WAAa0B,EAAI5B,OAAO7D,QAAQmE,QAKpDhC,EAAKsD,IAHRY,QAAQiB,KAAK,kBAAmB7B,EAAI5B,QAC7B4B,EAAI/B,QN6Jf6D,sBAAuB,SAAC7D,EAAOG,GAAR,OAAmB,IAAID,EAAgBF,EAAOG,KOvHzE,SAASJ,EAAeC,EAAO5D,EAAK6D,GAChC,OAAID,EAAM5D,IAAS4D,EAAM5D,GAAM6D,GACpBD,EAAM5D,GAAM6D,GAChB,KAEX,I,EAAM6D,EAAS,SAATA,EAAUC,EAAGhC,EAAKiB,GAEpB,OADAA,EAAMA,GAAM,IACHe,EAAEtG,OACAsE,EAAI/B,MAER+D,EAAEf,GAAKjB,GAAI,SAACoB,GAAD,OAAKW,EAAOC,EAAEZ,IAAIH,OAGzBgB,0BA1CM,CACjB,QAAU,KAyCc,mBACvB3H,GADuB,SACS2D,EAAOG,GACpC,GAAIA,EAAO7D,QAAX,CAEA,IAAIyH,EAAI,GAcR,GAZAA,EAAE3G,KAAK6G,EAASP,WAChBK,EAAE3G,KAAK6G,EAASnC,SAGhBiC,EAAE3G,KAAK6G,EAASN,gBAEhBI,EAAE3G,KAAK6G,EAASb,sBAEhBW,EAAE3G,KAAK6G,EAAShC,cAEhB8B,EAAE3G,KAAK6G,EAASnB,cAEmB,qBAAxB3C,EAAO7D,QAAQmB,OACtB,CACI,IAAIsE,EAAMkC,EAASJ,sBAAsB7D,EAAOG,GAEhD,OADA2D,EAAOC,EAAGhC,GACHA,EAAI/B,MAWnB,OATQG,EAAO7D,QACb4H,SAAQ,SAAAvF,GACN,IAAIoD,EAAKkC,EAASJ,sBAAsB7D,EAAO,CAC3C5D,KAAMC,EACNC,QAASqC,IAEbmF,EAAOC,EAAGhC,GACV/B,EAAQ+B,EAAI/B,SAETA,MAjCa,cAmCvB3D,GAnCuB,SAmCM2D,EAAMG,GAChC,MAAO,MApCa,IA2CfgE,EAAc,SAACnE,EAAM5D,GAC9B,IAAIiB,EAAQ,GACRgB,EAAM2B,EAAMoE,SAAShI,IAAS,GAClC,IAAK,IAAIiI,KAAOhG,EACZhB,EAAOD,KAAKiB,EAAIgG,IAElB,OAAOhH,GAIAiH,EAAc,SAAAtE,GAAK,OAAImE,EAAYnE,EAAM,YAEzCuE,EAAc,SAACvE,EAAMK,GAC9B,IACImC,GADUzC,EAAeC,EAAMoE,SAAS,UAAU/D,IAAY,IAC3CmC,UAAY,GAC/BnF,EAAQ,GAEZ,OADAmF,EAASgC,KAAI,SAAArB,GAAC,OAAE9F,EAAOD,KAAK2C,EAAeC,EAAMoE,SAAS,UAAUjB,IAAI,OACjE9F,GClHEoH,EAAQ,CACjBzI,mBAAoB,qBACpB0I,wBAAyB,0BACzBC,kBAAmB,oBACnB9I,0BAA2B,4BAC3B+I,4BAA6B,8BAC7BC,+BAAgC,iCAChCC,SAAW,WACXhJ,QAAU,UACViJ,UAAY,YACZhJ,QAAU,UACViJ,OAAS,UAGAC,EACFR,EADEQ,EAEG,SAAC3I,GAAD,MACP,CACGF,KAAMqI,EAAMzI,mBACZM,QAASA,IALR2I,EAOc,SAAC5E,EAAUX,GAAX,MAAmB,CACtCtD,KAAKqI,EAAMC,wBACXpI,QAAQ,CACJoD,KAAKA,EACLW,UAAUA,KCfP2D,0BAVM,CACpBkB,UAAW,eACXC,YAAa,YACbC,YAAa,YACbC,KAAM,OACNC,aAAa,EACbC,gBAAgB,QAChBC,MAAM,KAGqB,iBAAC,EAC3Bf,EAAMM,WADoB,SACT/E,EADS,GACS,IAAX1D,EAAU,EAAVA,QACxB,kCACI0D,GADJ,IAECwF,MAAMlJ,EAAQkJ,MACdC,SAASnJ,EAAQmJ,SACjBC,UAAU,OANe,YAAC,EAS3BjB,EAAMK,UAToB,SASV9E,EATU,GASO,EAAV1D,QACvB,kCACI0D,GADJ,IAEC0F,UAAS,OAZgB,YAAC,EAgB3BjB,EAAM5I,2BAhBoB,SAgBOmE,EAhBP,GAgByB,IAAX1D,EAAU,EAAVA,QAExC,OADAqG,QAAQC,KAAK,4BAA6BtG,GACnC,2BACH0D,GADJ,IAECuF,gBAAiBjJ,EAAQC,YApBA,IAgCfoJ,EAAa,SAAA3F,GAAK,OAAEA,EAAM4F,IAAIF,UAE9BG,EAAc,SAAA7F,GAAK,OAAIA,EAAM4F,IAAIH,U,QC5C/BK,EAFC,GCGVC,G,kCAAAA,GACKC,UAAW,mCAKPD,UCKAE,GALE,CACbC,MAXgB,CAChB,QAAU,UACV,UAAY,aAUZC,aARe,CACf,SAAW,aC4BTC,IAAa,IAAIC,KAClBC,iBAAiBC,IAASC,aAE1BC,uBAAuB,CACpBC,6BAA8B,SAAAC,GAC1B,OAAIA,EAAaC,oBAAsB,IAGZ,IAAhBC,KAAKC,SAGRH,EAAaI,mBAAmB,IAET,IAAhBF,KAAKC,SAET,QAIlBE,QAASjB,GAAOC,UAAW,CACxBiB,iBAAiB,EACjBC,UAAWC,IAAkBC,aAGhCC,QAuBCC,GAAU,SAACC,GACb,IAAIvH,EAAQuH,EAASC,WACrB,GAAKxH,EAAMyH,UAAazH,EAAMyH,SAASC,WAAvC,CAKA,IAAIC,EAAY,CAChBA,SAAoB,IACLrD,EAAYtE,GAClBkE,SAAQ,SAAAf,GACbR,QAAQiF,MAAM,cAAczE,EAAG,SAASnD,GACxC2H,EAAWE,SAASzK,KAAK,CAAC6C,GAAGkD,EAAElD,GAAGQ,QAAQ0C,EAAE1C,aAEhDkC,QAAQC,KAAK,4CACb,IAAI4C,EJjD6B,SAAAxF,GAAK,OAAEA,EAAM4F,IAAIJ,MIiDtCsC,CAAsBP,EAASC,YAC3CpB,GAAWtC,OAAO,YAAY0B,EAAOmC,GAEpCnI,MAAK,SAAAuI,GACFpF,QAAQC,KAAK,yCAGhBoF,OAAM,SAAAC,GACHtF,QAAQE,MAAM,gCAnBdF,QAAQE,MAAM,mBAwGPqF,GA7EW,SAAUX,GAsBhC,OApBAzB,EAAUyB,SAAWA,EACrB/K,EAAe2L,SAASlC,GAAUE,cAAa,SAAAnJ,GAAC,OAAEuK,KAClDnB,GAAWgC,GAAG,SAAS,SAAAzJ,GAAE,OAxDH,SAAC4I,EAAUc,GAEjC1F,QAAQC,KAAK,sBAAuByF,GAExB,MAARA,IAGCA,EAAO5K,SACR4K,EAAS,CAACA,IAIVd,EAASe,SAASrD,EAAmBoD,KA4CZE,CAAkBhB,EAAU5I,MACzDyH,GAAWoC,SAAQ,SAAAP,GAAG,OAAIV,EAASe,SAASpM,EAAwB,aACpEkK,GAAWqC,eAAc,SAAAR,GAAG,OAAIV,EAASe,SAASpM,EAAwB,mBAC1EkK,GAAWsC,gBAAe,SAAAvF,GACtBoE,EAASe,SAASpM,EAAwB,oBAG9CkK,GAAWuC,QACNnJ,MAAK,SAAA2D,GACFyF,YAAW,WACPrB,EAASe,SAASpM,EAAwB,gBAC5C,QAEL8L,OAAM,SAAAC,GACHtF,QAAQE,MAAM,wBAIf,SAAUpE,GACb,OAAO,SAAU0B,GACTA,EAAO/D,MAAQC,IACfsG,QAAQiF,MAAM,WAAYzH,EAAO7D,SACjC8J,GAAWtC,OAAO,SAAU3D,EAAO7D,SAC9BkD,MAAK,SAAAuI,GAEFpF,QAAQiF,MAAM,oCAAqCG,GACnDR,EAASe,SnBjEE,CAClClM,KD3DwB,YC4DxBE,QmB+DkDyL,IAC3BR,EAASe,SAAS,CAAClM,KAAKC,EAA4BC,QAAQ,KAC5DgL,GAAQC,MAGXS,OAAM,SAAAC,GACHtF,QAAQE,MAAM,2CAA6CoF,OAInE9H,EAAO/D,MAAQC,IAEfsG,QAAQiF,MAAM,uBACdxB,GAAWtC,OAAO,UAAW3D,EAAO7D,SAC/BkD,MAAK,SAAAuI,GAEFpF,QAAQiF,MAAM,uCAAwCG,MAGzDC,OAAM,SAAAC,GACHtF,QAAQE,MAAM,2CAA6CoF,OAKnE9H,EAAO/D,OAAO6I,EAAcP,0BAC5B/B,QAAQc,IAAI,oBAAqBtD,GACjCiG,GAAWtC,OAAO,UAAUlC,KAAKiH,UAAU1I,KAE/C,IAAI9C,EAASoB,EAAK0B,GAYlB,OAXIA,EAAO/D,MAAMC,KACT8D,EAAO7D,SACiB,cAAxB6D,EAAO7D,QAAQC,QACS,gBAAxB4D,EAAO7D,QAAQC,SACfoG,QAAQC,KAAK,+CACT0E,GAAQC,KAIpB5E,QAAQc,IAAI,qBAAsB8D,EAASC,YAEpCnK,KC3KbyL,GAAS,CACdzE,IAAK,OACL0E,aAIKC,GAAUC,YAAuBH,GAAQ,CAC9ClD,MAKAxB,aAGK8E,GAAiBC,cAoBRC,GAdQ,SAAAC,GACtB,IAAMC,EALNC,YAAQC,YAAgBtB,IAAoBuB,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAAAC,GAAE,OAAIA,GAA1GJ,CACCK,KAKKC,EAAK,2BACPP,EAAiBN,KADV,IAEVc,QAASZ,GAAea,MAOzB,MAAO,CAAEC,UADSC,YAAaJ,GACXA,U,iBCzBNK,GAZC,SAAAC,GACd,OACE,+BACKA,EAAMC,MAAM5F,KAAI,SAACrB,EAAEhF,GAAH,OACjB,+BAAW,eAAC,KAAD,CAAMkM,GAAI,KAAKlH,EAAElD,GAAjB,SAAsBkD,EAAElD,KAAWkD,EAAE1C,QAAhD,MAA4D0C,EAAE7G,SAAS,IAAIW,OAAnEkB,SCKDmM,GADWC,aAXF,SAAAvK,GAChB,MAAO,CACHoK,MAAO9F,EAAYtE,OAGJ,SAAAsI,GAAQ,MAAK,KAMdiC,CAA6CL,I,SCVvElM,MAAMwM,UAAUC,MAAQ,SAAcC,GAEpC,OAAO5N,KAAK0H,KAAI,SAACrB,EAAGhF,GAIlB,OADAgF,EAAEwH,QAAUxH,EAAE7G,QAAQsO,QACfF,EAASvH,EAAGhF,OAMvB,IAqBe0M,GApBS,SAAAV,GAAU,IAAD,EACmBW,mBAAS,MAD5B,oBACxBC,EADwB,KACLC,EADK,KAE/B,OACE,iCACE,iCAAMb,EAAMlN,KAAZ,OACA,iCACE,wBAAOgO,YAAY,oBAAoBC,MAAOH,EAAmBI,SAAU,SAAAzI,GAAG,OAAIsI,EAAqBtI,EAAI0I,OAAOF,UAClH,yBAAQG,QAAS,SAAA1M,GAAE,OAAEwL,EAAMmB,qBAAqBP,EAAmBZ,EAAM9J,YAAzE,kBACA,eAAC,KAAD,CAAMgK,GAAG,OAAT,qBAEF,+BACGF,EAAMC,MAAMK,OAAM,SAACtH,EAAGhF,GAAJ,OACjB,+BAAegF,EAAElD,GAAjB,IAAsBkD,EAAE1C,QAAxB,IAAkC0C,EAAE7G,QAAQqO,QAA5C,UAAQxH,EAAElD,aCbpB,IA+BesL,GADkBhB,aA7BT,SAAAvK,GAGhB,IAAIoC,EXyFiB,SAACpC,EAAM5D,EAAK6D,GAAZ,OAAkBF,EAAeC,EAAMoE,SAAShI,EAAK6D,GWzF5DuL,CAAcxL,EAAM,UAD5ByJ,OAAOgC,SAASC,SAASC,QAAQ,IAAI,MACQ,CAAC1L,GAAG,GAAG3D,QAAQ,IAKlE,OAJA8F,EAAQ9F,QAAU8F,EAAQ9F,SAAU,GAI7B,CACH8N,MAAO7F,EAAYvE,EAAMoC,EAAQnC,IACjChD,KAAMmF,EAAQ9F,QAAQW,KACtBoD,UAAW+B,EAAQnC,OAGJ,SAAAqI,GAAQ,MAAK,CACpCgD,qBAAqB,SAAC5L,EAAK0C,GAMvBkG,EAASrD,EAA6B7C,EAAQ1C,QAQrB6K,CAA6CM,I,2BCxBhEe,I,MAAd,oDACI,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACDnK,MAAQ,CACT6L,SAAU,GACVC,SAAU,GACVC,WAAW,GAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,iBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,iBARN,EADtB,gDAWI,SAAajN,GAAI,IAAD,EACYA,EAAEoM,OAAlBnO,EADI,EACJA,KAAMiO,EADF,EACEA,MACdpO,KAAKqP,SAAL,eAAiBlP,EAAOiO,MAbhC,0BAeI,SAAalM,GACTA,EAAEoN,iBACFtP,KAAKqP,SAAS,CAAEJ,WAAW,IAFf,MAGmBjP,KAAKkD,MAA5B6L,EAHI,EAGJA,SAAUC,EAHN,EAGMA,SACdD,GAAYC,GACZhP,KAAKqN,MAAMkC,OAAOR,EAAUC,KApBxC,oBAuBI,WAC0BhP,KAAKqN,MAAnBmC,UADF,IAAD,EAEqCxP,KAAKkD,MAAvC6L,EAFH,EAEGA,SAAUC,EAFb,EAEaA,SAFb,EAEuBC,UAC5B,OACI,sBAAKQ,UAAU,0DAAf,SACA,kCACI,sBAAKC,MAAO,CAACC,UAAU,WACvB,0CAEA,uBAAKF,UAAU,aAAf,UACI,mDACA,wBAAOnQ,KAAK,QAAQmQ,UAAU,eAAetP,KAAK,WAAWiO,MAAOW,EAAUV,SAAUrO,KAAKoP,aAAcjB,YAAY,mBAG3H,uBAAKsB,UAAU,aAAf,UACI,8CACA,wBAAOnQ,KAAK,WAAWmQ,UAAU,eAAetP,KAAK,WAAWiO,MAAOY,EAAUX,SAAUrO,KAAKoP,aAAcjB,YAAY,sBAG9H,sBAAKsB,UAAU,aAAf,SACI,uBAAKA,UAAU,iCAAf,UACI,wBAAOnQ,KAAK,WAAWmQ,UAAU,uBAAuBtM,GAAG,iBAC3D,wBAAOsM,UAAU,uBAAuBG,QAAQ,eAAhD,8BAIR,yBAASH,UAAU,4BAA4BlB,QAASvO,KAAKkP,aAA7D,oBACA,qBAAGO,UAAU,6BAAb,oBACW,oBAAGI,KAAK,IAAR,mCAnD3B,GAA4BC,cA8DbC,GADQtC,aA9EC,SAAAvK,GACpB,MAAO,CACHwC,SAAU,OAGS,SAAA8F,GAAQ,MAAK,CACpC+D,OAAQ,SAAC5G,EAAUqG,GACfxD,EzBoEa,SAAC7C,EAASqG,GAAV,MAAsB,CAC1C1P,KAAOC,EACPC,QAAQ,CACPmJ,SAASA,EACTqG,SAASA,IyBxEMO,CAAO5G,EAASqG,IACzBlD,YAAW,WACXa,OAAOgC,SAAS,MAClB,SAoEiBlB,CAA6CqB,ICtCrDkB,GADOvC,aArCE,SAAAvK,GACpB,MAAO,CACH+M,UAAWpH,EAAW3F,MAmCRuK,EA5BV,SAAAJ,GACR,OAAW,iCACX,uCACA,gDACA,mCACA,gCACI,+CAAgB,oBAAGwC,KAAK,YAAR,uBAAhB,OACA,sCAAO,eAAC,KAAD,CAAMtC,GAAG,QAAT,sBACP,sCAAO,eAAC,KAAD,CAAMA,GAAG,cAAT,6BACP,sCAAO,eAAC,KAAD,CAAMA,GAAG,YAAT,mCCbA2C,GARH,SAAA7C,GAEV,OACI,yCCQS8C,G,oDAVX,WAAYC,GAAO,uCACTA,G,sCAIV,WACI,OAAOpQ,KAAKoQ,KAAK5Q,QAAQ+C,MAAQvC,KAAKoQ,KAAK5Q,QAAQ6Q,S,cCRvD,WAAYD,GAAM,yBADlBA,KAAM,GAGFpQ,KAAKoQ,KAAOA,GAAQ,G,yCAGxB,WACI,OAAOpQ,KAAKoQ,KAAK5Q,SAAW,K,sBAEhC,WACI,OAAOsF,KAAKiH,UAAU/L,KAAKR,a,MCwBpB8Q,G,WA3BX,WAAYpN,GAAO,yBADnBA,MAAO,GAEHlD,KAAKkD,MAAQA,E,iDAIjB,SAAcqN,EAAK5P,GAEf4P,EAAOA,GAAQ,EACf5P,EAASA,GAAU,IACnB,IAAI6P,EAAQnJ,EAAYrH,KAAKkD,MAAM,aACnC,OAAOpC,EAAMC,KAAKyP,GACjBC,QAAO,SAAApK,GAAC,OAAG,IAAI8J,GAAU9J,MACzBqK,mBAAkB,SAAArK,GAAC,OAAEA,EAAE9D,QACvBoO,KAAKJ,EAAK5P,GACViQ,KAAKjQ,M,qBAKV,SAAcuC,GACV,OAAO,IAAIoN,EAAapN,O,KCPjBiN,GAbG,SAAA9C,GAGhB,OACE,iCACE,8CACA,8BACGA,EAAMmD,MAAM9I,KAAI,SAACrB,EAAEhF,GAAH,OAdN,SAACwP,EAAKxP,GACvB,OAAO,gCACHA,EADG,KACEwP,EAAKtO,KADP,KACc,oCAASsO,EAAKC,WAAd,OADd,KACoDD,EAAK1Q,OADhDkB,GAagB0P,CAAW1K,EAAEhF,YCDhC2P,GADUvD,aAXH,SAAUvK,GAE5B,MAAO,CACHsN,MAFcF,GAAaW,OAAO/N,GAEfgO,gBAAgBC,cAGlB,SAAU3F,GAAY,MAAQ,KAK9BiC,CAA6C0C,I,yFCFhEiB,GAAYC,cAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OA4Bd,IASeK,GADSpE,aARA,SAAAvK,GACtB,MAAO,CACH+M,UAAWpH,EAAW3F,GACtByF,SAAUI,EAAY7F,MAKJuK,EAhCxB,SAAsBJ,GACpB,IAAMyE,EAAUV,KAEhB,OACE,uBAAK3B,UAAWqC,EAAQP,KAAxB,UACE,eAACQ,GAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,gBAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAYC,KAAK,QAAQ1C,UAAWqC,EAAQL,WAAYW,MAAM,UAAUC,aAAW,OAAnF,SACE,eAAC,KAAD,MAEF,eAAC,KAAD,CAAM9E,GAAG,OAAT,kBACA,eAAC+E,GAAA,EAAD,CAAYC,QAAQ,KAAK9C,UAAWqC,EAAQF,MAA5C,SAEGvE,EAAM1E,WAGT,eAAC6J,GAAA,EAAD,CAAQJ,MAAM,UAAUvC,KAAK,SAA7B,oBACA,eAAC,KAAD,CAAMtC,GAAG,SAAT,wBAGHF,EAAM5H,eClCAgN,GAAb,uFAKI,cALJ,sBAOI,WACI,OAAO/S,EAAegT,WAAsBC,GAAWtJ,aAAaoB,cAR5E,KAAagI,GAEFzG,OAAS/C,GAFPwJ,GAGFtJ,UAAYwJ,GAHVF,GAIFnG,eAAiBA,GASbmG,UCvBXG,GACA,aCIEvJ,GAAeoJ,GAAMtJ,UAAUE,cAEf,WAElB3J,EAAe2L,SAAS,YAAY,SAAAnL,GAAC,OAAE,IAAI0S,MAC3ClT,EAAe2L,SAAShC,GAAaoB,UAAU,SAAAvK,GAAC,OAAI,OAAK,aCO7D2S,G,OAE6BJ,GAAMnG,iBAA3BS,G,GAAAA,MAAOG,G,GAAAA,UAGTqE,GAAOuB,SAASC,eAAe,QACjCC,GAAM,CACVA,IAAW,SAAA3M,GAAC,OAAGsG,OAAOgC,SAASC,WAI/BqE,iBACC,eAAC,IAAD,CAAUlG,MAAOA,GAAjB,SACC,eAAC,cAAD,CAAaG,UAAWA,GAAxB,SACA,eAAC,KAAD,UACA,eAACgG,GAAD,UACC,gBAAC,KAAD,WACA,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,QAAlB,SACC,eAAC,GAAD,MAED,eAAC,KAAD,CAAOA,KAAK,UAAZ,SACC,eAACC,GAAD,MAED,eAAC,KAAD,CAAOD,KAAK,QAAZ,SACC,eAAC,GAAD,MAED,eAAC,KAAD,CAAOA,KAAK,cAAZ,SACC,eAAC,GAAD,MAKD,eAAC,KAAD,CAAOA,KAAK,YAAZ,SACC,eAAC,GAAD,MAED,eAAC,KAAD,CAAOA,KAAK,OAAZ,SACC,eAAC,GAAD,CAA0BjQ,GAAI6P,GAAMM,IAAI,UAGzC,eAAC,KAAD,UACE,eAAC,GAAD,iBAOJ/B,K","file":"static/js/main.07c37071.chunk.js","sourcesContent":["export const NEW_MESSAGE = 'NEW_MESSAGE'\r\nexport const CHAT_STARTED = 'CHAT_STARTED'\r\nexport const CHAT_ENDED = 'CHAT_ENDED'\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE'\r\nexport const NEW_USER = 'NEW_AGENT'\r\nexport const OWN_DATA_RECEIVED = 'OWN_DATA_RECEIVED'\r\nexport const CHANGE_CHAT_SERVICE = 'CHANGE_CHAT_SERVICE'\r\nexport const RATE_GOOD = 'RATE_GOOD'\r\nexport const RATE_BAD = 'RATE_BAD'\r\nexport const CHAT_RATED = 'CHAT_RATED'\r\nexport const NEW_CONVERSATION = 'NEW_CONVERSATION'\r\nexport const DELETE_CONVERSATION = 'DELETE_CONVERSATION'\r\nexport const CONNECTION_CLOSED ='CONNECTION_CLOSED'\r\nexport const CONNECTION_STATUS_CHANGED ='CONNECTION_STATUS_CHANGED'\r\nexport const CONNECTION_STATUS_CONNECTED =\"CONNECTION_STATUS_CONNECTED\"\r\nexport const CONNECTION_STATUS_DISCONNECTED =\"CONNECTION_STATUS_DISCONNECTED\"\r\nexport const SIGN_OUT = 'SIGN_OUT'\r\nexport const SIGN_IN = 'SIGN_IN'\r\nexport const SIGNED_IN = 'SIGNED_IN'\r\nexport const REFRESH = 'REFRESH'\r\nexport const FORGET = 'FORGET'\r\nexport const NEW_PHONECALL ='NEW_PHONECALL'\r\nexport const ENTITY_APPLY_EVENT =\"ENTITY_APPLY_EVENT\"\r\nexport const SEND_MESSAGE_TO_CHANNEL =\"SEND_MESSAGE_TO_CHANNEL\"\r\nexport const ENTITY_CLEAR_DB =\"ENTITY_CLEAR_DB\"\r\n","import * as actionTypes from '../constants/chatActionTypes'\r\nimport emily from '../../static/emily.svg'\r\nexport const newMessage = ({\r\n\tid,\r\n\tauthorId,\r\n\tcustomId,\r\n\ttext,\r\n\tbuttons,\r\n\ttitle,\r\n\timageUrl,\r\n\ttimestamp\r\n}) => ({\r\n\ttype: actionTypes.NEW_MESSAGE,\r\n\tpayload: {\r\n\t\tid,\r\n\t\tauthorId,\r\n\t\tcustomId,\r\n\t\ttext,\r\n\t\tbuttons,\r\n\t\ttitle,\r\n\t\timageUrl,\r\n\t\ttimestamp,\r\n\t},\r\n})\r\nexport const connectionStatusChanged = (newStatus) => ({\r\n\ttype: actionTypes.CONNECTION_STATUS_CHANGED,\r\n\tpayload:{\r\n\t\tstatus:newStatus\r\n\t}\r\n});\r\n\r\nexport const newPhoneCall= (phone,name,time)=>({\r\n\ttype:actionTypes.NEW_PHONECALL,\r\n\tpayload:{\r\n\t\tphone:phone,\r\n\t\tname:name,\r\n\t\ttime: time\r\n\t}\r\n})\r\n\r\nexport const sendMessage = ({\r\n\ttext,\r\n\tcustomId\r\n}) => ({\r\n\ttype: actionTypes.SEND_MESSAGE,\r\n\tpayload: {\r\n\t\ttext,\r\n\t\tcustomId: customId || String(Math.random()),\r\n\t\ttimestamp: new Date(),\r\n\t},\r\n})\r\n\r\nexport const sendMessageToChannel = (channelId,text)=>({\r\n\ttype:actionTypes.SEND_MESSAGE_TO_CHANNEL,\r\n\tpayload:{\r\n\t\ttext:text,\r\n\t\tchannelId:channelId\r\n\t}\r\n\r\n})\r\nexport const deleteConversation = ({\r\n\tid\r\n}) => ({\r\n\ttype: actionTypes.DELETE_CONVERSATION,\r\n\tpayload: {\r\n\t\tid\r\n\t},\r\n})\r\n\r\nexport const refresh =()=>({\r\n    type:actionTypes.REFRESH\r\n})\r\nexport const SignOut =()=>({\r\n\ttype:actionTypes.SIGN_OUT\r\n\r\n})\r\nexport const signedIn =(payload)=>({\r\n\ttype:actionTypes.SIGNED_IN,\r\n\tpayload:payload\r\n})\r\nexport const signIn =(userName,password)=>({\r\n\ttype : actionTypes.SIGN_IN,\r\n\tpayload:{\r\n\t\tuserName:userName,\r\n\t\tpassword:password\r\n\t}\r\n\r\n});\r\nexport const newConversation = ({\r\n\ttitle\r\n}) => ({\r\n\ttype: actionTypes.NEW_CONVERSATION,\r\n\tpayload: {\r\n\t\tname: title,\r\n\t\tid: String(Math.random()),\r\n\t\tavatar: {\r\n\t\t\tsrc: emily\r\n\t\t}\r\n\r\n\t},\r\n})\r\nexport const applyEvent =(payload)=>\r\n\t({\r\n\t\ttype:actionTypes.ENTITY_APPLY_EVENT,\r\n\t\tpayload:payload\r\n\t})\r\n\r\nexport const newUser = ({\r\n\tid,\r\n\tname,\r\n\temail,\r\n\tavatarUrl\r\n}) => ({\r\n\ttype: actionTypes.NEW_USER,\r\n\tpayload: {\r\n\t\tid,\r\n\t\tname,\r\n\t\temail,\r\n\t\tavatarUrl,\r\n\t},\r\n})\r\n\r\nexport const ownDataReceived = ({\r\n\tid\r\n}) => ({\r\n\ttype: actionTypes.OWN_DATA_RECEIVED,\r\n\tpayload: {\r\n\t\tid,\r\n\t},\r\n})\r\n\r\nexport const chatEnded = () => ({\r\n\ttype: actionTypes.CHAT_ENDED,\r\n})\r\n\r\nexport const chatStarted = ({\r\n\tchatId\r\n}) => ({\r\n\ttype: actionTypes.CHAT_STARTED,\r\n\tpayload: {\r\n\t\tchatId,\r\n\t},\r\n})\r\n\r\nexport const changeChatService = ({\r\n\tchatService\r\n}) => ({\r\n\ttype: actionTypes.CHANGE_CHAT_SERVICE,\r\n\tpayload: {\r\n\t\tchatService,\r\n\t},\r\n})\r\n\r\nexport const rateGood = () => ({\r\n\ttype: actionTypes.RATE_GOOD,\r\n})\r\n\r\nexport const rateBad = () => ({\r\n\ttype: actionTypes.RATE_BAD,\r\n})\r\n\r\nexport const chatRated = ({\r\n\trate\r\n}) => ({\r\n\ttype: actionTypes.CHAT_RATED,\r\n\tpayload: {\r\n\t\trate,\r\n\t},\r\n})\r\n\r\n","export default __webpack_public_path__ + \"static/media/emily.d34aecd9.svg\";","\r\n\r\nclass ServiceDef{\r\n    name:string=\"\";\r\n    cnst:any;\r\n    instanceName:string =\"\";\r\n\r\n\r\n}\r\ninterface IServiceLocator{\r\n    register(serviceName:any, constructor:any, instanceName:any|null):any;\r\n    getService<T>(serviceName:string):T;\r\n\r\n}\r\nclass _ServiceLocator implements IServiceLocator {\r\n\r\n    serviceDefinitions:ServiceDef[] = [];\r\n    constructor() {\r\n    }\r\n    register(serviceName:any, constructor:any, instanceName:any) {\r\n\r\n        instanceName = instanceName || \"nodef\"\r\n        var current = this.serviceDefinitions.findIndex(s => s.name === serviceName && s.instanceName === instanceName);\r\n        var def:ServiceDef = {\r\n            name: serviceName,\r\n            cnst: constructor,\r\n            instanceName: instanceName\r\n        };\r\n        if (current < 0)\r\n            this.serviceDefinitions.push(def);\r\n        else\r\n            this.serviceDefinitions[current] = def\r\n        return def;\r\n    }\r\n    public getService<T>(serviceName:string):T {\r\n        var result = undefined;\r\n        var services = this.serviceDefinitions.filter(s => s.name === serviceName);\r\n        if (services.length > 0) {\r\n            var def = services[services.length - 1];\r\n            result = def.cnst(this);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nconst ServiceLocator:IServiceLocator = new _ServiceLocator();\r\nexport default ServiceLocator","import util from \"util\"\r\nimport ServiceLocator from \"./ServiceLocator\";\r\n\r\nvar linq = require('linq');\r\nvar utils = {};\r\nutils.from = linq.from;\r\nutils.isArray = a => Array.isArray(a);\r\n\r\nutils.indexOfEx = (a, exp) => {\r\n    var result = -1;\r\n    if (utils.isArray(a)) {\r\n        for(var i=0;i<a.length;i++){\r\n            if (exp && exp(a[i]))\r\n                return i;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\nutils.clean = function clean(obj) {\r\n    for (var propName in obj) {\r\n      if (obj[propName] === null || obj[propName] === undefined) {\r\n        delete obj[propName];\r\n      }\r\n    }\r\n    \r\n    return obj\r\n}\r\n\r\n\r\n\r\nexport default utils;","import { call } from \"redux-saga/effects\";\r\nimport { Subject } from 'rxjs';\r\nconst subject = new Subject();\r\nsubject.next(1);\r\n\r\n\r\nconst publish = ev=>subject.next(ev);\r\nconst subscribe = c=> subject.subscribe({next: ev=>c(ev)})\r\n\r\nsubject.subscribe(ev=>{\r\n    \r\n});\r\n\r\n\r\nexport default {\r\n    pulish:publish,\r\n    subscribe:subscribe\r\n}\r\n\r\n\r\n","import { Subject } from 'rxjs';\r\nconst subject = new Subject();\r\nconst publish = ev=>subject.next(ev);\r\nconst subscribe = c=> subject.subscribe({next: ev=>c(ev)})\r\nfunction checkNotificationPromise() {\r\n    try {\r\n      Notification.requestPermission().then();\r\n    } catch(e) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\nconst EventNames = {\r\n    EntityAdded :\"entityadded\"\r\n}\r\nconst Events={\r\n    Names:EventNames,\r\n    EntityAdded : (e)=>({type:EventNames.EntityAdded,payload:e})\r\n\r\n}\r\n\r\nclass EventBus{\r\n\r\n    static publish = ev=>subject.next(ev);\r\n    static subscribe = c=> subject.subscribe({next: ev=>c(ev)})\r\n    static Events = Events\r\n\r\n}\r\nsubject.subscribe(ev=>{\r\n    //console.warn(\"bus:\",ev)\r\n    //debugger\r\n    if (ev.type===EventNames.EntityAdded && ev.payload && ev.payload.type === 'phonecall'){\r\n        //console.warn(\"new phone call\");\r\n        var elapsed = (new Date() - new Date(ev.payload.payload.time))/1000;\r\n        if (elapsed<2*60){\r\n        checkNotificationPromise();\r\n        var img = '/to-do-notifications/img/icon-128.png';\r\n        var text = \"Phone Call \" + ev.payload.payload.firstName + \" \" + ev.payload.payload.lastName;\r\n        text += \"</hr><strong>xxxxx</strong>\"\r\n        \r\n        var notification = new Notification('To do list', { body: text, icon: img });\r\n        }\r\n        \r\n    }\r\n    \r\n});\r\n\r\n\r\nexport default EventBus\r\n\r\n\r\n","\r\nimport utils from \"../../../services/utils\"\r\nimport tracker from \"./EntityTrackerFilter\"\r\nimport log_step from \"./LogFilter\"\r\nimport remove_entity_step from \"./RemoveEntityFilter\"\r\nimport updateFilter from \"./UpdateEntityFilter\"\r\nimport validate_step from \"./ValidateFilter\"\r\nimport version_control_step from \"./VersionControlFilter\"\r\n\r\n\r\nfunction _getEntityById(state, type, id) {\r\n    if (state[type] && state[type][id])\r\n        return state[type][id];\r\n    return null;\r\n}\r\n\r\nclass PipelineContext {\r\n    state = {};\r\n    action = {}\r\n    constructor(state, action) {\r\n        this.state = state || {}\r\n        if (action && action.payload && action.payload.payload && typeof action.payload.payload.payload === 'string') {\r\n            try {\r\n                action.payload.payload.payload = JSON.parse(action.payload.payload.payload)\r\n            } catch (e) {}\r\n        }\r\n        this.action = action || {};\r\n\r\n    }\r\n    getChannelId = () => this.action.payload.channelId;\r\n    getChannel = () => {\r\n        var ret = _getEntityById(this.state, 'channel', this.getChannelId())\r\n        if (!ret) {\r\n            var channelId = this.getChannelId();\r\n            ret = ret || {\r\n                type: 'channel',\r\n                id: channelId,\r\n                name: 'new'\r\n            };\r\n        }\r\n        return ret;\r\n    }\r\n    isValid = () => this.action && this.action.payload && this.action.payload.channelId;\r\n    version = () => this.action.payload.version;\r\n    payload1 = ()=> this.action.payload || {};\r\n    payload2 = ()=>this.payload1().payload || {};\r\n    payload3 = ()=> this.payload2().payload || {};\r\n    isRemoveOperation = ()=> this.payload2().action == 'remove' || this.payload2().removed;\r\n    isRemoveOperation_dep = () => this.action && this.action.payload && this.action.payload.payload && this.action.payload.payload.removed;\r\n    getEntityId = () => this.action && this.action.payload && this.action.payload.payload ?\r\n        this.action.payload.payload.id :\r\n        null;\r\n    getEntityType = () => this.action && this.action.payload && this.action.payload.payload ?\r\n        this.action.payload.payload.type :\r\n        null;\r\n    getEntityName = () => this.action && this.action.payload && this.action.payload.payload ?\r\n        this.action.payload.payload.name :\r\n        null;\r\n\r\n    getEntity = () => {\r\n        var id = this.getEntityId();\r\n        var type = this.getEntityType();\r\n        return id && type ? _getEntityById(this.state, type, id) : null;\r\n\r\n    }\r\n    mergeAttributes = (entity) => {\r\n        entity = entity || this.getEntity();\r\n        if (entity) {\r\n            var attribs = entity.payload || {};\r\n            var payload_attribs = this.action && this.action.payload && this.action.payload.payload ?\r\n                this.action.payload.payload.attributes || {} : {};\r\n            try {\r\n                entity.payload = Object.assign({}, entity.payload, payload_attribs)\r\n            } catch (e) {}\r\n        }\r\n\r\n    }\r\n    merge = (entity) => {\r\n        entity = entity || this.getEntity();\r\n        if (!entity) {\r\n            var id = this.getEntityId();\r\n            var type = this.getEntityType();\r\n            if (id && type) {\r\n                entity = {\r\n                    type: type,\r\n                    id: id,\r\n                    payload: {}\r\n                };\r\n            }\r\n        }\r\n        if (entity ){\r\n            var payload = this.action && this.action.payload && this.action.payload.payload\r\n                ? this.action.payload.payload.payload || {}\r\n                :{}\r\n            entity.payload = Object.assign({},entity.payload,utils.clean(payload));\r\n            entity.name = this.getEntityName() || entity.name;\r\n            entity.description = this.payload2().description || entity.description;\r\n            entity.channelId = this.getChannelId();\r\n            this.mergeAttributes(entity);\r\n        }\r\n        return entity;\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst createPipeLineContext = (state, action) => {\r\n    var result = {}\r\n    //debugger;\r\n    if (action && action.payload && action.payload.payload && typeof action.payload.payload.payload === 'string') {\r\n        try {\r\n            action.payload.payload.payload = JSON.parse(action.payload.payload.payload)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n    result.state = state;\r\n    result.action = action;\r\n    result.log = console.log;\r\n    result.getChannelId = () => action.payload.channelId;\r\n    result.getChannel = () => {\r\n        var ret = _getEntityById(state, 'channel', result.getChannelId())\r\n        if (!ret) {\r\n            var channelId = result.getChannelId();\r\n            ret = ret || {\r\n                type: 'channel',\r\n                id: channelId,\r\n                name: 'new'\r\n            };\r\n        }\r\n        return ret;\r\n    }\r\n    result.isValid = () => action && action.payload && action.payload.channelId;\r\n    result.version = () => action.payload.version;\r\n    result.isRemoveOperation = () => action && action.payload && action.payload.payload && action.payload.payload.removed;\r\n    result.getEntityId = () => action && action.payload && action.payload.payload ? action.payload.payload.entityId : null;\r\n    result.getEntityType = () => action && action.payload && action.payload.payload ? action.payload.payload.entityType : null;\r\n\r\n    result.getEntity = () => {\r\n        var id = result.getEntityId();\r\n        var type = result.getEntityType();\r\n        return id && type ? _getEntityById(state, type, id) : null;\r\n\r\n    }\r\n    console.error(\"pipeline\");\r\n\r\n    return result;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n    tracker: tracker,\r\n    updateFilter: updateFilter,\r\n    removeFilter: remove_entity_step,\r\n    versionControlFilter: version_control_step,\r\n    logFilter: log_step,\r\n    validateFilter: validate_step,\r\n    createPipeLineContext: (state, action) => new PipelineContext(state, action)\r\n\r\n}","import EventBus from \"../../../services/EventBus\";\r\n\r\nconst entity_tracker_filter = (ctx,next)=>{\r\n\r\n    var entity = ctx.getEntity();\r\n    var ret = next(ctx);\r\n    var entity_after = ctx.getEntity();\r\n    var is_added = entity_after && !entity;\r\n    \r\n    if (is_added){\r\n        //console.error(EventBus.Events.Names.EntityAdded);\r\n        EventBus.publish(EventBus.Events.EntityAdded(entity_after));\r\n    }\r\n    \r\n    \r\n    return ret;\r\n}\r\nexport default entity_tracker_filter;","\r\n\r\n\r\n\r\nvar final_apply_step = (ctx,next)=>{\r\n    var state = ctx.state;\r\n    var action = ctx.action;\r\n    var channelId = action.payload.channelId;\r\n    //var version = action.payload.version;\r\n    //var payload = action.payload.payload;\r\n    var entityId = ctx.getEntityId();// payload.entityId;\r\n    var entityType = ctx.getEntityType();//  payload.entityType;\r\n    //var eventType = payload.eventType;\r\n    //var entityPayload = payload.payload;\r\n    /*\r\n     * check if channel exists...    \r\n    */\r\n    //debugger;\r\n    var channel = ctx.getChannel() || {\r\n        type: 'channel',\r\n        id: channelId,\r\n        name: 'new',\r\n        version: 0\r\n    };\r\n    if (action.payload && Number.isInteger(action.payload.version) && action.payload.version > -1) {\r\n        channel.version = action.payload.version;\r\n    }\r\n    channel.children= channel.children || [];\r\n    channel.messages= channel.messages || [];\r\n    var entity = ctx.merge();\r\n    //var message= ctx.merge();\r\n    if (entity && entityId && entityType) {\r\n        //entity = ctx.merge();\r\n        switch(entityType)\r\n        {\r\n            case 'message':\r\n                if (!channel.messages.includes(entity.id))\r\n                    channel.messages.push(entityId);\r\n                break;\r\n            case 'channel':\r\n                if (entity.id === channelId){\r\n                    channel = Object.assign({},channel,entity);\r\n                }\r\n                break;\r\n            default: \r\n                var exists = channel.children\r\n                    .findIndex(val=> val && val.id == entityId && val.entityType == entityType) >-1;\r\n                if (!exists)\r\n                    channel.children.push({\r\n                        type: entityType,\r\n                        id: entityId\r\n                    })\r\n                break;\r\n        }\r\n    }\r\n    channel.id = channelId;\r\n    //if (entity && entityType && entityId &&  entityType!='channel'){\r\n    if (entity && entityType && entityId &&  entityId!=channelId){\r\n        /// If we have and entity\r\n        /// We should update it\r\n        ctx.state = {\r\n            ...state,\r\n            'channel':{\r\n                ...state.channel,\r\n                [channelId]:channel\r\n            },\r\n            [entityType]:{\r\n                ...state[entityType],\r\n                [entityId]:entity,\r\n            }\r\n        };\r\n        console.info(\"Entity '\"+entityType+\"' successfully updated:\",entity)\r\n        //return next(ctx);\r\n    }\r\n    else if(channel && channelId) {\r\n        // Otherwise just update channel\r\n        ctx .state=\r\n        {\r\n            ...state,\r\n            'channel':{\r\n                ...state.channel,\r\n                [channelId]:channel\r\n            }\r\n        };\r\n        console.info(\"Channel '\"+channelId+\"' successfully updated:\",channel)\r\n        //return next(ctx);\r\n    } else{\r\n        console.error(\r\n            \"Unexpected Error: Bad channel! Cannoy figure out the channel/entity for this action:\", action\r\n        )\r\n\r\n    }\r\n\r\n    return next(ctx);\r\n}\r\n\r\nexport default final_apply_step","import utils from \"../../../services/utils\";\r\n\r\nconst remove_entity_step = (ctx, next) => {\r\n    if (ctx.isRemoveOperation()) {\r\n        var id = ctx.getEntityId();\r\n        var type = ctx.getEntityType();\r\n        if (id && type) {\r\n            var folder = ctx.state[type] || {};\r\n            folder[id] = null;\r\n            ctx.state[type] = utils.clean(folder);\r\n            var channel = ctx.getChannel();\r\n            var idx =-1;\r\n            if (type === 'message') {\r\n                idx = channel.messages.indexOf(id);\r\n                if (idx>-1){\r\n                    channel.messages.splice(idx,1);\r\n                }\r\n    \r\n            } else {\r\n                idx =  channel.children.findIndex(x => x.id === id && x.type === type);\r\n                while (idx > -1) {\r\n                    channel.children.splice(idx, 1);\r\n                    idx =  channel.children.findIndex(x => x.id === id && x.type === type);\r\n                }\r\n            }\r\n            console.info(\r\n                \"Entity '\"+type +\"' with id: [\"+id+\"] removed.\"\r\n            )\r\n        }\r\n    }\r\n    return next(ctx)\r\n\r\n};\r\n\r\nexport default remove_entity_step","const version_control_step = (ctx,next)=>{\r\n    var prev_version = ctx.getChannel().version;\r\n    var event_version = ctx.action.payload.version;\r\n    if (typeof event_version === 'number' && isFinite(event_version)){\r\n        var diff = event_version - prev_version;\r\n        if (diff<0){\r\n\r\n        }\r\n        if (diff>1){\r\n        }\r\n    }\r\n    var ret = next(ctx);\r\n    var new_version = ctx.getChannel().version;\r\n    ctx.getChannel().status= '';\r\n    console.log(\"Version of \"+ ctx.getChannelId() +\" Changed From\",prev_version, \" to\", new_version);\r\n    return ret;\r\n}\r\n\r\nexport default version_control_step;","const log_step = (ctx,next)=>{\r\n    var ret = null;\r\n    console.log(\"Pipeline Starts Channel:\", ctx.getChannel(), \"action:\",ctx.action)\r\n    try\r\n    {\r\n        \r\n        ret = next(ctx)\r\n    }\r\n    catch (e){\r\n        console.error(\"An error occured in pipeline:\",e)\r\n    }\r\n    console.log(\"Pipeline Finish Channel:\", ctx.getChannel(), \"action:\",ctx.action)\r\n    return ret;\r\n}\r\n\r\nexport default log_step","const validate_step = (ctx,next)=>{\r\n    var ev = ctx.action.payload\r\n    var isValid = ctx && ctx.action && ctx.action.payload \r\n        &&  ctx.action.payload.channelId && ctx.action.payload.version;\r\n    if (!isValid){\r\n        console.warn(\"Invalid Event :\", ctx.action )\r\n        return ctx.state;\r\n    }\r\n    return next(ctx);\r\n}\r\n\r\nexport default validate_step","import { createReducer } from 'redux-create-reducer'\r\nimport { chatStarted } from '../actions/chatActions';\r\nimport * as actionTypes from '../constants/chatActionTypes'\r\nimport utils from \"../../services/utils\"\r\nimport bus from \"../../services/EventService\"\r\nimport pipeline from \"./Pipeline/pipeline\"\r\n\r\n\r\n\r\n/*\r\n * We use a document store schema.\r\n * The store is partitioned by entity type.\r\n * Each entity has:id, name, type, version and payload.\r\n * \r\n*/\r\nconst initialState = {\r\n    'channel':{\r\n        // 'channel-id': {\r\n        //     id: 'channel-id',\r\n        //     name: 'channel 1',\r\n        //     type:'channel',\r\n        //     version:0,\r\n        //     payload:{},\r\n        //     children:[],\r\n        //     messages:[]\r\n        // },\r\n    },\r\n\r\n}\r\n\r\n/*\r\n * Events should have:\r\n *   channelId: The channel id they have been received in.\r\n *   Version: The version of event.\\\r\n *   payload: The event payload.\r\n * This payload should have \r\n *   type: event type (e.g added, updated, deleted)\r\n *   entityType: The entity type it refers to\r\n *   id : Id of entity\r\n *   payload: the event payload which is normally added to entity \r\n *              payload. \r\n *    \r\n*/\r\n\r\nfunction _getEntityById(state, type,id) {\r\n    if (state[type] && state[type][id])\r\n        return state[type][id];\r\n    return null;\r\n}\r\nconst invoke = (p, ctx, idx)=>{\r\n    idx = idx|| 0;\r\n    if (idx>=p.length){\r\n        return ctx.state ;\r\n    }\r\n    return p[idx](ctx,(x)=>invoke(p,x,++idx));\r\n}\r\n\r\nexport default createReducer(initialState, {\r\n    [actionTypes.ENTITY_APPLY_EVENT](state, action) {\r\n        if(!action.payload)\r\n            return;\r\n        var p = [];\r\n        //p.push(log_step);\r\n        p.push(pipeline.logFilter);\r\n        p.push(pipeline.tracker)\r\n\r\n        //p.push(validate_step);\r\n        p.push(pipeline.validateFilter);\r\n        //p.push(version_control_step);\r\n        p.push(pipeline.versionControlFilter)\r\n        //p.push(final_apply_step);\r\n        p.push(pipeline.updateFilter);\r\n        //p.push(remove_entity_step);\r\n        p.push(pipeline.removeFilter);\r\n\r\n        if (typeof action.payload.length==='undefined')\r\n            {\r\n                var ctx = pipeline.createPipeLineContext(state, action);\r\n                invoke(p, ctx);\r\n                return ctx.state;\r\n            }\r\n        var q = action.payload;\r\n        q.forEach(ev => {\r\n            var ctx =pipeline.createPipeLineContext(state, {\r\n                type: actionTypes.ENTITY_APPLY_EVENT,\r\n                payload: ev\r\n            });\r\n            invoke(p, ctx);\r\n            state = ctx.state;\r\n        });\r\n        return state;\r\n    },\r\n    [actionTypes.ENTITY_CLEAR_DB](state,action){\r\n        return {\r\n\t\t\t\r\n\t\t}\r\n    }\r\n\r\n});\r\n\r\nexport const getEntities = (state,type)=>{\r\n    var result =[];\r\n    var obj = state.entities[type] || {}\r\n    for (let key in obj) {\r\n        result.push(obj[key]);\r\n      }\r\n      return result;\r\n\r\n};\r\nexport const getEntityById = (state,type,id)=> _getEntityById(state.entities,type,id)\r\nexport const getChannels = state => getEntities(state,'channel');\r\nexport const getChannelById = (state,id) => _getEntityById(state.entities,'channel',id);\r\nexport const getMessages = (state,channelId) => {\r\n    var channel = _getEntityById(state.entities,'channel',channelId)||{}\r\n    var messages = channel.messages || [];\r\n    var result =[]\r\n    messages.map(x=>result.push(_getEntityById(state.entities,'message',x)||{}) );\r\n    return result;\r\n}\r\n","export const ENTITY_APPLY_EVENT = \"ENTITY_APPLY_EVENT\"\r\nexport const SEND_MESSAGE_TO_CHANNEL = \"SEND_MESSAGE_TO_CHANNEL\"\r\n\r\nexport const Types = {\r\n    ENTITY_APPLY_EVENT: \"ENTITY_APPLY_EVENT\",\r\n    SEND_MESSAGE_TO_CHANNEL: \"SEND_MESSAGE_TO_CHANNEL\",\r\n    CONNECTION_CLOSED :'CONNECTION_CLOSED',\r\n    CONNECTION_STATUS_CHANGED :'CONNECTION_STATUS_CHANGED',\r\n    CONNECTION_STATUS_CONNECTED :\"CONNECTION_STATUS_CONNECTED\",\r\n    CONNECTION_STATUS_DISCONNECTED :\"CONNECTION_STATUS_DISCONNECTED\",\r\n    SIGN_OUT : 'SIGN_OUT',\r\n    SIGN_IN : 'SIGN_IN',\r\n    SIGNED_IN : 'SIGNED_IN',\r\n    REFRESH : 'REFRESH',\r\n    FORGET : 'FORGET'\r\n\r\n}\r\nexport const Actions = {\r\n    Types: Types,\r\n    applyEvent: (payload) =>\r\n        ({\r\n            type: Types.ENTITY_APPLY_EVENT,\r\n            payload: payload\r\n        }),\r\n    sendMessageToChannel : (channelId,text)=>({\r\n        type:Types.SEND_MESSAGE_TO_CHANNEL,\r\n        payload:{\r\n            text:text,\r\n            channelId:channelId\r\n        }\r\n    \r\n    })\r\n        \r\n}\r\n","import { createReducer } from 'redux-create-reducer'\r\nimport { Actions,Types } from '../../services/actions'\r\n\r\nconst initialState = {\r\n\tchatState: 'NOT_CHATTING',\r\n\twidgetState: 'MAXIMIZED',\r\n\tchatService: 'botEngine',\r\n\trate: 'none',\r\n\tactiveChatId:0,\r\n\tconnectionState:'close',\r\n\ttoken:''\r\n}\r\n\r\nexport default createReducer(initialState, {\r\n\t[Types.SIGNED_IN](state,{payload}) {\r\n\t\treturn{\r\n\t\t\t...state,\r\n\t\t\ttoken:payload.token,\r\n\t\t\tuserName:payload.userName,\r\n\t\t\tloggedIn: true\r\n\t\t}\r\n\t},\r\n\t[Types.SIGN_OUT](state,{payload}) {\r\n\t\treturn{\r\n\t\t\t...state,\r\n\t\t\tloggedIn:false\r\n\t\t\t\r\n\t\t}\r\n\t},\r\n\t[Types.CONNECTION_STATUS_CHANGED](state,{payload}) {\r\n\t\tconsole.info('connection status changed', payload)\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tconnectionState: payload.status,\r\n\t\t\t\r\n\t\t}\r\n\t},\r\n\r\n})\r\n\r\n// export const getChatState = state => state.app.chatState\r\n// export const getWidgetState = state => state.app.widgetState\r\n// export const getChatService = state => state.app.chatService\r\n// export const getRate = state => state.app.rate\r\nexport const getConnectionStatus = state=>state.app.connectionState\r\nexport const getSinedIn = state=>state.app.loggedIn\r\nexport const getAuthorizationToken = state=>state.app.token\r\nexport const getUserName = state => state.app.userName","\r\nvar singleton = {}\r\n\r\nexport default singleton;","\r\n\r\nvar config ={}\r\n\r\nclass Config{\r\n    static serverUrl= 'http://172.16.6.158:5000/chatHub';\r\n\r\n}\r\n\r\n\r\nexport default Config;","const entityTypes = {\r\n    'channel':'channel',\r\n    'phonecall':'phonecall'\r\n};\r\nconst serviceNames={\r\n    \"storeAPI\":\"storeAPI\"\r\n}\r\n\r\n\r\n\r\nconst constants ={\r\n    types:entityTypes,\r\n    serviceNames:serviceNames\r\n}\r\n\r\nexport default constants","import {\r\n    HubConnectionBuilder,\r\n    LogLevel,\r\n    HttpTransportType\r\n} from \"@microsoft/signalr\"\r\nimport { channel } from \"redux-saga\";\r\nimport {\r\n    connecionClosed,\r\n    connectionStatusChanged,\r\n    newConversation,\r\n    newMessage,\r\n    newPhoneCall,signIn,signedIn,\r\n    applyEvent\r\n} from \"./actions/chatActions\";\r\nimport * as actionTypes from './constants/chatActionTypes'\r\nimport { REHYDRATE } from 'redux-persist';\r\n\r\nimport {getAuthorizationToken} from './reducers/app'\r\nimport {getChannels,getChannelById} from './reducers/entities';\r\n//import statics from \"./staticStoreAPI\";\r\nimport singleton from \"../services/singleton\"\r\nimport Config from \"../services/config\";\r\nimport { Actions } from \"../services/actions\";\r\nimport ServiceLocator from \"../services/ServiceLocator\";\r\nimport constants from \"../services/constants\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst connection = new HubConnectionBuilder()\r\n    .configureLogging(LogLevel.Information)\r\n    //.withAutomaticReconnect()\r\n    .withAutomaticReconnect({\r\n        nextRetryDelayInMilliseconds: retryContext => {\r\n            if (retryContext.elapsedMilliseconds < 60000) {\r\n                // If we've been reconnecting for less than 60 seconds so far,\r\n                // wait between 0 and 10 seconds before the next reconnect attempt.\r\n                return Math.random() * 5000;\r\n            } else {\r\n                // If we've been reconnecting for more than 60 seconds so far, stop reconnecting.\r\n                if (retryContext.previousRetryCount<100){\r\n\r\n                    return Math.random() * 100000\r\n                }\r\n                return null\r\n            }\r\n        }\r\n    })\r\n    .withUrl( Config.serverUrl, {\r\n        skipNegotiation: true,\r\n        transport: HttpTransportType.WebSockets\r\n    })\r\n    //.configureLogging(signalR.LogLevel.Debug)\r\n    .build();\r\n\r\nconst processApplyEvent = (storeAPI, events)=>\r\n{\r\n    console.info(\"processApplyEvent  \", events)\r\n    //debugger\r\n    if (events==null)\r\n        return;\r\n    /// Convert it to array if it's not\r\n    if (!events.length){\r\n        events = [events];\r\n    }\r\n    if (1==1){\r\n        //storeAPI.dispatch(new applyEvent(events));\r\n        storeAPI.dispatch(Actions.applyEvent(events));\r\n    }\r\n    else {\r\n        events.map(ev=>{\r\n            storeAPI.dispatch(new applyEvent(ev));\r\n        })\r\n    }\r\n}\r\n\r\nconst DoStart = (storeAPI) => {\r\n    var state = storeAPI.getState();\r\n    if (!state._persist || !state._persist.rehydrated){\r\n        //debugger;\r\n        console.error(\"rehydration!!!\")\r\n        return\r\n    }\r\n    var startModel ={};\r\n    startModel.channels=[];\r\n    var channels = getChannels(state);\r\n    channels.forEach(x => {\r\n        console.debug(\"StartModel:\",x, \"State=\",state)\r\n        startModel.channels.push({id:x.id,version:x.version})\r\n    });\r\n    console.info(\"******************connected*************\");\r\n    var token = getAuthorizationToken(storeAPI.getState());\r\n    connection.invoke(\"Authorize\",token ,startModel)\r\n\r\n    .then(res=>{\r\n        console.info(\"Connection Successfully Authroized\")\r\n        //storeAPI.dispatch(connectionStatusChanged('connected'))\r\n    })\r\n    .catch(err=>{\r\n        console.error(\"Authorization Failed\")\r\n\r\n    });\r\n\r\n\r\n\r\n};\r\n\r\nconst signalRMiddleware = function (storeAPI) {\r\n\r\n    singleton.storeAPI = storeAPI;\r\n    ServiceLocator.register(constants.serviceNames,s=>storeAPI);\r\n    connection.on(\"apply\", ev => processApplyEvent(storeAPI, ev));\r\n    connection.onclose(err => storeAPI.dispatch(connectionStatusChanged('close')))\r\n    connection.onreconnected(err => storeAPI.dispatch(connectionStatusChanged('reconnected')))\r\n    connection.onreconnecting(x => {\r\n        storeAPI.dispatch(connectionStatusChanged('reconnection'));\r\n    });\r\n    if (1==1){\r\n    connection.start()\r\n        .then(x => {\r\n            setTimeout(()=>{\r\n                storeAPI.dispatch(connectionStatusChanged('connected'));\r\n            },500);\r\n        })\r\n        .catch(err => {\r\n            console.error(\"Error on start...\")\r\n\r\n        });\r\n    }\r\n    return function (next) {\r\n        return function (action) {\r\n            if (action.type == actionTypes.SIGN_IN) {\r\n                console.debug(\"sign in \", action.payload)\r\n                connection.invoke('signIn', action.payload)\r\n                    .then(res => {\r\n\r\n                        console.debug(\"Successfully signed in. payload: \", res)\r\n                        storeAPI.dispatch(signedIn(res))\r\n                        storeAPI.dispatch({type:actionTypes.ENTITY_CLEAR_DB,payload:{}});\r\n                        DoStart(storeAPI);\r\n\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(\"an error occured whilte tringto signIn: \" + err)\r\n\r\n                    })\r\n            }\r\n            if (action.type == actionTypes.REFRESH) {\r\n\r\n                console.debug(\"Invoking refresh...\")\r\n                connection.invoke('refersh', action.payload)\r\n                    .then(res => {\r\n\r\n                        console.debug(\"Successfully refershed in. payload: \", res)\r\n                        //storeAPI.dispatch(signedIn(res))\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(\"an error occured whilte tringto signIn: \" + err)\r\n\r\n                    })\r\n\r\n            }\r\n            if (action.type===Actions.Types.SEND_MESSAGE_TO_CHANNEL){\r\n                console.log(\"sending to server\", action);\r\n                connection.invoke(\"execute\",JSON.stringify(action));\r\n            }\r\n            let result = next(action)\r\n            if (action.type==actionTypes.CONNECTION_STATUS_CHANGED){\r\n                if (action.payload && (\r\n                    action.payload.status==='connected' || \r\n                    action.payload.status==='reconnected')){\r\n                    console.info(\"Reconnected to server. We will apply start.\")\r\n                        DoStart(storeAPI);\r\n                    \r\n                }\r\n            }\r\n            console.log('signalr next state', storeAPI.getState())\r\n\r\n            return result\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default signalRMiddleware","import { applyMiddleware, createStore, compose } from 'redux'\r\nimport { persistStore, persistCombineReducers } from 'redux-persist'\r\nimport thunkMiddleware from 'redux-thunk'\r\n//import storage from 'redux-persist/es/storage'\r\nimport storage from 'localforage'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport entities from './reducers/entities'\r\n\r\nimport app from './reducers/app'\r\nimport signalRMiddleware from './signalrMiddleWare'\r\n\r\nconst config = {\r\n\tkey: 'root',\r\n\tstorage,\r\n\t//timeout: null,\r\n}\r\n\r\nconst reducer = persistCombineReducers(config, {\r\n\tapp,\r\n\t// users,\r\n\t// conversations,\r\n\t// messages,\r\n\t// phoneCalls,\r\n\tentities\r\n})\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst composeCreateStore = () =>\r\n\tcompose(applyMiddleware(signalRMiddleware), window.devToolsExtension ? window.devToolsExtension() : fn => fn)(\r\n\t\tcreateStore,\r\n\t)\r\n\r\nconst configureStore = port => {\r\n\tconst finalCreateStore = composeCreateStore(port)\r\n\tconst store = {\r\n\t\t...finalCreateStore(reducer),\r\n\t\trunSaga: sagaMiddleware.run,\r\n\t}\r\n\r\n\t// if (module.hot) {\r\n\t// \tmodule.hot.accept('./reducers', () => store.replaceReducer(reducer))\r\n\t// }\r\n\tconst persistor = persistStore(store)\r\n\treturn { persistor, store }\r\n}\r\n\r\nexport default configureStore\r\n","import React from 'react';\r\nimport {BrowserRouter,Link} from 'react-router-dom'\r\n\r\n\r\n// Using \"Stateless Functional Components\"\r\nconst renderItem =x=><p>x</p>;\r\nconst Channels= props =>{\r\n  return (\r\n    <div>\r\n        {props.items.map((x,i)=>\r\n        <p key={i}><Link to={'./'+x.id}>{x.id}</Link>{x.version}  {(x.payload||{}).name}</p>\r\n\r\n        )}\r\n  </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Channels","import {    connect} from 'react-redux'\r\nimport { getChannels} from '../store/reducers/entities'\r\nimport Channels from '../components/Channels'\r\nconst mapStateToProps = state => {\r\n        return {\r\n            items: getChannels(state)\r\n        }\r\n    }\r\nconst mapDispatchToProps = dispatch => ({\r\n    // deleteConversation: id => {\r\n    //     dispatch(deleteConversation(id))\r\n\r\n    // }\r\n})\r\nconst ChannelsContainer = connect(mapStateToProps, mapDispatchToProps)(Channels)\r\nexport default ChannelsContainer","import React from 'react';\r\nimport { useState } from 'react';\r\nimport {BrowserRouter,Link} from 'react-router-dom'\r\n\r\nArray.prototype.mapEx = function name(callBack) {\r\n\r\n  return this.map((x, i) => {\r\n    //x.message = ()=>x.Message;\r\n    //x.payload.Message = \"llkk\"\r\n    x.message = x.payload.Message;\r\n    return callBack(x, i);\r\n  });\r\n\r\n}\r\n\r\n// Using \"Stateless Functional Components\"\r\nconst renderItem = x => <p>x</p>;\r\nconst ChannelMessages = props => {\r\n  const [messageInputValue, setMessageInputValue] = useState(\"kk\");\r\n  return (\r\n    <div>\r\n      <div>{props.name} </div>\r\n      <div>\r\n        <input placeholder=\"Type message here\" value={messageInputValue} onChange={val => setMessageInputValue(val.target.value)} />\r\n        <button onClick={ev=>props.sendMessageToChannel(messageInputValue, props.channelId)}>Send</button>\r\n        <Link to=\"home\">Home</Link>\r\n      </div>\r\n      <div>\r\n        {props.items.mapEx((x, i) =>\r\n          <p key={x.id}>{x.id} {x.version} {x.payload.message} by: </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ChannelMessages","import {    connect} from 'react-redux'\r\nimport { getEntityById,getMessages} from '../store/reducers/entities'\r\nimport ChannelMessages from '../components/ChannelMessages'\r\nimport { useParams } from \"react-router\";\r\nimport {sendMessageToChannel} from \"../store/actions/chatActions\"\r\nimport { Actions } from '../services/actions';\r\n\r\nfunction checkNotificationPromise() {\r\n    try {\r\n      Notification.requestPermission().then();\r\n    } catch(e) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\nvar id = null\r\nconst mapStateToProps = state => {\r\n//    console.log(id)\r\n         id = window.location.pathname.replace(\"/\",\"\");\r\n        var channel = getEntityById(state,\"channel\",id) || {id:'',payload:{}}\r\n        channel.payload = channel.payload ||{};\r\n\r\n\r\n       // console.log(\"channel=\",channel)\r\n        return {\r\n            items: getMessages(state,channel.id),\r\n            name :channel.payload.name,\r\n            channelId: channel.id\r\n        }\r\n    }\r\nconst mapDispatchToProps = dispatch => ({\r\n    sendMessageToChannel:(text,channel)=>{\r\n        // debugger\r\n        // checkNotificationPromise();\r\n        // var img = '/to-do-notifications/img/icon-128.png';\r\n        // var text = 'HEY! Your task \"' +  '\" is now overdue.';\r\n        // var notification = new Notification('To do list', { body: text, icon: img });\r\n        dispatch(Actions.sendMessageToChannel(channel,text));\r\n        //console.log('message' , text)\r\n    }\r\n    // deleteConversation: id => {\r\n    //     dispatch(deleteConversation(id))\r\n\r\n    // }\r\n})\r\nconst ChannelMessagesContainer = connect(mapStateToProps, mapDispatchToProps)(ChannelMessages)\r\nexport default ChannelMessagesContainer","import React, { Component } from \"react\";\r\nimport {    connect} from 'react-redux'\r\nimport { signIn } from \"../store/actions/chatActions\";\r\n//import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './signin.css'\r\nconst mapStateToProps = state => {\r\n    return {\r\n        messages: ''\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    signIn :(userName, password)=>{\r\n        dispatch(signIn(userName,password))\r\n        setTimeout(()=>{\r\n        window.location=\"/\"\r\n    },2000)\r\n    }\r\n// deleteConversation: id => {\r\n//     dispatch(deleteConversation(id))\r\n\r\n// }\r\n})\r\nexport  class Login extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            submitted: false\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.setState({ submitted: true });\r\n        const { username, password } = this.state;\r\n        if (username && password) {\r\n            this.props.signIn(username, password);\r\n        }\r\n    }\r\n    render() {\r\n        const { loggingIn } = this.props;\r\n        const { username, password, submitted } = this.state;\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center vh-100\">\r\n            <form>\r\n                <div style={{minHeight:\"100px\",}}></div>\r\n                <h3>Sign In</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" name=\"username\" value={username} onChange={this.handleChange} placeholder=\"Enter email\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={this.handleChange} placeholder=\"Enter password\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <button  className=\"btn btn-primary btn-block\" onClick={this.handleSubmit}>Submit</button>\r\n                <p className=\"forgot-password text-right\">\r\n                    Forgot <a href=\"#\">password?</a>\r\n                </p>\r\n            </form>\r\n            </div>\r\n        );\r\n    }\r\n        \r\n    \r\n}\r\n\r\nconst LoginContainer = connect(mapStateToProps, mapDispatchToProps)(Login)\r\nexport default LoginContainer","import React from 'react';\r\nimport {    connect} from 'react-redux'\r\nimport {getSinedIn} from '../store/reducers/app'\r\nimport {BrowserRouter,Link} from 'react-router-dom'\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        singnedIn: getSinedIn(state)\r\n    }\r\n}\r\n\r\n\r\n\r\n// Using \"Stateless Functional Components\"\r\nconst Home= props =>{\r\n    return     <div>\r\n    <h1>App </h1>\r\n    <h2>Sample App:  </h2>\r\n    <p>:</p>\r\n    <ul>\r\n        <li> Charters:  <a href=\"/charters\">Charters </a>.</li>\r\n        <li>   <Link to=\"/logs\">Logs </Link></li>\r\n        <li>   <Link to=\"/phonecalls\">Phone Calls </Link></li>\r\n        <li>   <Link to=\"/channels\">Channels </Link></li>\r\n    </ul>\r\n</div>\r\n//     return props.singnedIn?\r\n//     <div>\r\n//     <h1>App </h1>\r\n//     <h2>Sample App:  </h2>\r\n//     <p>:</p>\r\n//     <ul>\r\n//         <li> Charters:  <a href=\"/charters\">Charters </a>.</li>\r\n//         <li>   <a href=\"/logs\">Logs </a></li>\r\n//         <li>   <a href=\"/phonecalls\">Phone Calls </a></li>\r\n//     </ul>\r\n// </div>\r\n//         :\r\n//         <SignIn/>\r\n}\r\n\r\n\r\nconst HomeContainer = connect(mapStateToProps)(Home)\r\nexport default HomeContainer","import React from 'react';\r\n\r\n\r\n// Using \"Stateless Functional Components\"\r\nconst Logs= props =>{\r\n    \r\n  return (\r\n      <div>Logs</div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Logs","import Entity from \"./Entity\";\r\n\r\nclass PhoneCall extends Entity {\r\n\r\n    \r\n    constructor(data) {\r\n        super(data);\r\n        //this.data = data;\r\n\r\n    }\r\n    get time(){\r\n        return this.data.payload.time || this.data.payload.Time\r\n    }\r\n}\r\n\r\nexport default PhoneCall","class Entity{\r\n \r\n    data ={};\r\n    constructor(data){\r\n\r\n        this.data = data || {};\r\n\r\n    }\r\n    get payload(){\r\n        return this.data.payload || {}\r\n    }\r\n    toString(){\r\n        return JSON.stringify(this.payload)\r\n    }\r\n}\r\n\r\nexport default Entity","import PhoneCall from \"./entities/PhoneCall\";\r\nimport utils from \"./utils\";\r\nimport {getEntities} from \"../store/reducers/entities\"\r\n\r\n\r\n\r\nclass DataServices{\r\n\r\n    state ={}\r\n    constructor(state){\r\n        this.state = state;\r\n\r\n    }\r\n\r\n    getPhoneCalls(page,length){\r\n        //debugger;\r\n        page = page || 0;\r\n        length = length || 1000;\r\n        var calls = getEntities(this.state,\"phonecall\")\r\n        return utils.from(calls)\r\n        .select(x=> new PhoneCall(x))\r\n        .orderByDescending(x=>x.time)\r\n        .skip(page*length)\r\n        .take(length)\r\n\r\n        \r\n    }\r\n\r\n    static Create(state){\r\n        return new DataServices(state);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default DataServices\r\n","import React from 'react';\r\n\r\nconst renderCall = (call,i) => {\r\n  return <li key={i}>\r\n     {i} [{call.time}] <strong>{call.toString()} </strong>: {call.name} \r\n  </li>\r\n\r\n}\r\n// Using \"Stateless Functional Components\"\r\nconst PhoneCall = props => {\r\n  //debugger\r\n  var ss = props\r\n  return (\r\n    <div>\r\n      <h1>Phone Calls</h1>\r\n      <ul>\r\n        {props.calls.map((x,i) => renderCall(x,i))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhoneCall","import { connect } from 'react-redux';\r\nimport DataServices from '../services/dataservice';\r\nimport PhoneCall from './PhoneCall';\r\nvar mapStateToProps = function (state) {\r\n    var dataService = DataServices.Create(state); //.getPhoneCalls();\r\n    return {\r\n        calls: dataService.getPhoneCalls().toArray()\r\n    };\r\n};\r\nvar mapDispatchToProps = function (dispatch) { return ({\r\n// deleteConversation: id => {\r\n//     dispatch(deleteConversation(id))\r\n// }\r\n}); };\r\nvar PhoneCallContainer = connect(mapStateToProps, mapDispatchToProps)(PhoneCall);\r\nexport default PhoneCallContainer;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {    connect} from 'react-redux'\r\nimport {getSinedIn,getUserName} from '../store/reducers/app'\r\nimport {BrowserRouter,Link} from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction ButtonAppBar(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Link to=\"home\">Home</Link>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            \r\n            {props.userName}\r\n\r\n          </Typography>\r\n          <Button color=\"inherit\" href=\"Signin\">Login </Button>\r\n          <Link to=\"SignIn\">SinIn</Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n      singnedIn: getSinedIn(state),\r\n      userName: getUserName(state)\r\n  }\r\n}\r\n\r\n\r\nconst LayoutContainer = connect(mapStateToProps)(ButtonAppBar)\r\nexport default LayoutContainer","import Config from \"./services/config\";\r\nimport _constants from \"./services/constants\";\r\nimport ServiceLocator from \"./services/ServiceLocator\";\r\nimport configureStore from \"./store/store\";\r\n\r\nexport interface IStoreAPI{\r\n    distaptch(ev:any):any;\r\n    getState():any;\r\n}\r\n\r\nexport class Shila{\r\n\r\n    static config = Config;\r\n    static constants = _constants;\r\n    static configureStore = configureStore;\r\n    static TT(){\r\n    }\r\n    static storeAPI():IStoreAPI {\r\n        return ServiceLocator.getService<IStoreAPI>(_constants.serviceNames.storeAPI);\r\n    }\r\n    \r\n}\r\n\r\nexport default Shila;","var AService = /** @class */ (function () {\r\n    function AService() {\r\n    }\r\n    return AService;\r\n}());\r\nexport { AService };\r\n","\r\nimport ServiceLocator from './services/ServiceLocator'\r\nimport Shila from './Shila'\r\nimport {AService} from \"./services/AService\"\r\n\r\nconst serviceNames = Shila.constants.serviceNames;\r\n\r\nconst composeServices=()=>{\r\n\r\n    ServiceLocator.register(\"AService\", s=>new AService());\r\n    ServiceLocator.register(serviceNames.storeAPI, s => null,\"instance\");\r\n}\r\n\r\nexport default composeServices;","import * as React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { PersistGate } from 'redux-persist/lib/integration/react'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store/store'\r\n//import rootSaga from './store/sagas'\r\n//import AppContainer from './components/AppContainer'\r\nimport ChannelsContainer from \"./components/ChannelsContainer\"\r\nimport ChannelMessagesContainer from \"./components/ChannelMessagesContainer\"\r\nimport SignIn from './components/SignIn'\r\nimport Home from './components/home'\r\nimport Logs from './components/Logs'\r\nimport PhoneCallContainer from './components/phoneCallContainer'\r\nimport {BrowserRouter,Route,Switch,useLocation} from 'react-router-dom'\r\nimport MainLayout from './components/MainLayout'\r\nimport Shila from './Shila'\r\nimport composeServices from './ServiceComposer';\r\ncomposeServices();\r\n\r\nconst { store, persistor } = Shila.configureStore()\r\n//store.runSaga(rootSaga, store)\r\n\r\nconst root = document.getElementById('root')\r\nlet query={}\r\nquery.get= x=> window.location.pathname;\r\n\r\n\r\n\r\nrender(\r\n\t<Provider store={store}>\r\n\t\t<PersistGate persistor={persistor}>\r\n\t\t<BrowserRouter>\r\n\t\t<MainLayout >\r\n\t\t\t<Switch>\r\n\t\t\t<Route exact path=\"/home\">\r\n\t\t\t\t<Home/>\r\n\t\t\t</Route>\r\n\t\t\t<Route path=\"/SignIn\">\r\n\t\t\t\t<SignIn/>\r\n\t\t\t</Route>\r\n\t\t\t<Route path=\"/Logs\">\r\n\t\t\t\t<Logs/>\r\n\t\t\t</Route>\r\n\t\t\t<Route path=\"/PhoneCalls\">\r\n\t\t\t\t<PhoneCallContainer/>\r\n\t\t\t</Route>\r\n\t\t\t{/* <Route path=\"/Chat\">\r\n\t\t\t\t<AppContainer/>\r\n\t\t\t</Route> */}\r\n\t\t\t<Route path=\"/channels\">\r\n\t\t\t\t<ChannelsContainer/>\r\n\t\t\t</Route>\r\n\t\t\t<Route path=\"/:id\">\r\n\t\t\t\t<ChannelMessagesContainer id={query.get(\"id\")}/>\r\n\t\t\t</Route>\r\n\r\n\t\t\t<Route >\r\n\t\t\t\t <Home/> \r\n\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t\t</MainLayout>\r\n\t\t\t</BrowserRouter>\r\n\t\t</PersistGate>\r\n\t</Provider>,\r\n\troot,\r\n)\r\n\r\n"],"sourceRoot":""}